/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Alias } from '../model/alias';
import { AliasHistoryEntry } from '../model/aliasHistoryEntry';
import { AliasNewRequest } from '../model/aliasNewRequest';
import { AliasPayRequest } from '../model/aliasPayRequest';
import { AliasUpdateRequest } from '../model/aliasUpdateRequest';
import { ErrorResponse } from '../model/errorResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AliasesService {

    protected basePath = 'http://localhost:8001';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * list affiliations with merchant offers.
     */
    public aliasaffiliates(extraHttpRequestParams?: any): Observable<Array<any>> {
        return this.aliasaffiliatesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Authenticates an alias with a provided password and returns the private key if successful. Warning: Calling this function over a public network can lead to someone reading your password/private key in plain text.
     * @param alias 
     * @param password 
     */
    public aliasauthenticate(alias: string, password: string, extraHttpRequestParams?: any): Observable<Array<any>> {
        return this.aliasauthenticateWithHttpInfo(alias, password, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns the total amount received by the given alias in transactions with at least minconf confirmations.
     * @param alias The syscoin alias for transactions
     * @param minconf ï»¿Only include transactions confirmed at least this many times. default&#x3D;1.
     */
    public aliasbalance(alias: string, minconf?: number, extraHttpRequestParams?: any): Observable<number> {
        return this.aliasbalanceWithHttpInfo(alias, minconf, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Count aliases that an array of aliases own.
     */
    public aliascount(extraHttpRequestParams?: any): Observable<number> {
        return this.aliascountWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Scan and filter aliases aliasfilter \"\" 5 # list aliases updated in last 5 blocks aliasfilter \"^alias\" # list all aliases starting with \"alias\" aliasfilter 36000 0 0 stat # display stats (number of aliases) on active aliases
     * @param regexp apply [regexp] on aliases, empty means all aliases
     * @param from show results from this GUID [from], empty means first
     * @param count number of results to return.
     * @param safesearch shows all aliases that are safe to display (not on the ban list)
     */
    public aliasfilter(regexp?: string, from?: string, count?: string, safesearch?: string, extraHttpRequestParams?: any): Observable<Array<Alias>> {
        return this.aliasfilterWithHttpInfo(regexp, from, count, safesearch, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * List all stored values of an alias.
     * @param aliasname 
     */
    public aliashistory(aliasname: string, extraHttpRequestParams?: any): Observable<Array<AliasHistoryEntry>> {
        return this.aliashistoryWithHttpInfo(aliasname, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Show values of an alias.
     * @param aliasname 
     */
    public aliasinfo(aliasname: string, extraHttpRequestParams?: any): Observable<Alias> {
        return this.aliasinfoWithHttpInfo(aliasname, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * List my own aliases.
     * @param aliasname Alias name to use as filter.
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    public aliaslist(aliasname?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Array<Alias>> {
        return this.aliaslistWithHttpInfo(aliasname, count, from, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Creates a new Syscoin Alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasnew(request: AliasNewRequest, extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.aliasnewWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Send multiple times from an alias. Amounts are double-precision floating point numbers.
     * @param request 
     */
    public aliaspay(request: AliasPayRequest, extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.aliaspayWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Update and possibly transfer an alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasupdate(request: AliasUpdateRequest, extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.aliasupdateWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * list affiliations with merchant offers.
     */
    public aliasaffiliatesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliasaffiliates';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Authenticates an alias with a provided password and returns the private key if successful. Warning: Calling this function over a public network can lead to someone reading your password/private key in plain text.
     * @param alias 
     * @param password 
     */
    public aliasauthenticateWithHttpInfo(alias: string, password: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliasauthenticate';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'alias' is not null or undefined
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling aliasauthenticate.');
        }
        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling aliasauthenticate.');
        }
        if (alias !== undefined) {
            queryParameters.set('alias', <any>alias);
        }

        if (password !== undefined) {
            queryParameters.set('password', <any>password);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns the total amount received by the given alias in transactions with at least minconf confirmations.
     * @param alias The syscoin alias for transactions
     * @param minconf ï»¿Only include transactions confirmed at least this many times. default&#x3D;1.
     */
    public aliasbalanceWithHttpInfo(alias: string, minconf?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliasbalance';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'alias' is not null or undefined
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling aliasbalance.');
        }
        if (alias !== undefined) {
            queryParameters.set('alias', <any>alias);
        }

        if (minconf !== undefined) {
            queryParameters.set('minconf', <any>minconf);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Count aliases that an array of aliases own.
     */
    public aliascountWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliascount';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Scan and filter aliases aliasfilter \&quot;\&quot; 5 # list aliases updated in last 5 blocks aliasfilter \&quot;^alias\&quot; # list all aliases starting with \&quot;alias\&quot; aliasfilter 36000 0 0 stat # display stats (number of aliases) on active aliases
     * @param regexp apply [regexp] on aliases, empty means all aliases
     * @param from show results from this GUID [from], empty means first
     * @param count number of results to return.
     * @param safesearch shows all aliases that are safe to display (not on the ban list)
     */
    public aliasfilterWithHttpInfo(regexp?: string, from?: string, count?: string, safesearch?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliasfilter';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (regexp !== undefined) {
            queryParameters.set('regexp', <any>regexp);
        }

        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (safesearch !== undefined) {
            queryParameters.set('safesearch', <any>safesearch);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * List all stored values of an alias.
     * @param aliasname 
     */
    public aliashistoryWithHttpInfo(aliasname: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliashistory';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'aliasname' is not null or undefined
        if (aliasname === null || aliasname === undefined) {
            throw new Error('Required parameter aliasname was null or undefined when calling aliashistory.');
        }
        if (aliasname !== undefined) {
            queryParameters.set('aliasname', <any>aliasname);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Show values of an alias.
     * @param aliasname 
     */
    public aliasinfoWithHttpInfo(aliasname: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliasinfo';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'aliasname' is not null or undefined
        if (aliasname === null || aliasname === undefined) {
            throw new Error('Required parameter aliasname was null or undefined when calling aliasinfo.');
        }
        if (aliasname !== undefined) {
            queryParameters.set('aliasname', <any>aliasname);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * List my own aliases.
     * @param aliasname Alias name to use as filter.
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    public aliaslistWithHttpInfo(aliasname?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliaslist';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (aliasname !== undefined) {
            queryParameters.set('aliasname', <any>aliasname);
        }

        if (count !== undefined) {
            queryParameters.set('count', <any>count);
        }

        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Creates a new Syscoin Alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasnewWithHttpInfo(request: AliasNewRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliasnew';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasnew.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Send multiple times from an alias. Amounts are double-precision floating point numbers.
     * @param request 
     */
    public aliaspayWithHttpInfo(request: AliasPayRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliaspay';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliaspay.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Update and possibly transfer an alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasupdateWithHttpInfo(request: AliasUpdateRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/aliasupdate';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasupdate.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
