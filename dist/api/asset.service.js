"use strict";
/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
var encoder_1 = require("../encoder");
require("../rxjs-operators");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var AssetService = /** @class */ (function () {
    function AssetService(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost:8001';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    AssetService.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    /**
     * Collect interest on this asset allocation if an interest rate is set on this asset.
     * @param request
     */
    AssetService.prototype.assetallocationcollectinterest = function (request, extraHttpRequestParams) {
        return this.assetallocationcollectinterestWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Show stored values of a single asset allocation. Set getinputs to true if you want to get the allocation inputs, if applicable.
     * @param asset
     * @param alias
     * @param getinputs
     */
    AssetService.prototype.assetallocationinfo = function (asset, alias, getinputs, extraHttpRequestParams) {
        return this.assetallocationinfoWithHttpInfo(asset, alias, getinputs, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Send an asset you own to another alias as an asset allocation.
     * @param request
     */
    AssetService.prototype.assetallocationsend = function (request, extraHttpRequestParams) {
        return this.assetallocationsendWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Show status as it pertains to any current Z-DAG conflicts or warnings related to a sender or sender/txid combination of an asset allocation transfer. Leave txid empty if you are not checking for a specific transfer. Return value is in the status field and can represent 4 levels(-1:Not Found, 0:OK, 1:Warning or 2:Critical)
     * @param asset
     * @param sender
     * @param txid
     */
    AssetService.prototype.assetallocationsenderstatus = function (asset, sender, txid, extraHttpRequestParams) {
        return this.assetallocationsenderstatusWithHttpInfo(asset, sender, txid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Show stored values of a single asset and its. Set getinputs to true if you want to get the allocation inputs, if applicable.
     * @param asset
     * @param getinputs
     */
    AssetService.prototype.assetinfo = function (asset, getinputs, extraHttpRequestParams) {
        return this.assetinfoWithHttpInfo(asset, getinputs, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Create a new Syscoin Asset.
     * @param request
     */
    AssetService.prototype.assetnew = function (request, extraHttpRequestParams) {
        return this.assetnewWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Send an asset allocation you own to another alias.
     * @param request
     */
    AssetService.prototype.assetsend = function (request, extraHttpRequestParams) {
        return this.assetsendWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Transfer asset from one user to another.
     * @param request
     */
    AssetService.prototype.assettransfer = function (request, extraHttpRequestParams) {
        return this.assettransferWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Perform an update on an asset you control.
     * @param request
     */
    AssetService.prototype.assetupdate = function (request, extraHttpRequestParams) {
        return this.assetupdateWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * Collect interest on this asset allocation if an interest rate is set on this asset.
     * @param request
     
     */
    AssetService.prototype.assetallocationcollectinterestWithHttpInfo = function (request, extraHttpRequestParams) {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling assetallocationcollectinterest.');
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetallocationcollectinterest", requestOptions);
    };
    /**
     *
     * Show stored values of a single asset allocation. Set getinputs to true if you want to get the allocation inputs, if applicable.
     * @param asset
     * @param alias
     * @param getinputs
     
     */
    AssetService.prototype.assetallocationinfoWithHttpInfo = function (asset, alias, getinputs, extraHttpRequestParams) {
        if (asset === null || asset === undefined) {
            throw new Error('Required parameter asset was null or undefined when calling assetallocationinfo.');
        }
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling assetallocationinfo.');
        }
        if (getinputs === null || getinputs === undefined) {
            throw new Error('Required parameter getinputs was null or undefined when calling assetallocationinfo.');
        }
        var queryParameters = new http_1.URLSearchParams('', new encoder_1.CustomQueryEncoderHelper());
        if (asset !== undefined) {
            queryParameters.set('asset', asset);
        }
        if (alias !== undefined) {
            queryParameters.set('alias', alias);
        }
        if (getinputs !== undefined) {
            queryParameters.set('getinputs', getinputs);
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetallocationinfo", requestOptions);
    };
    /**
     *
     * Send an asset you own to another alias as an asset allocation.
     * @param request
     
     */
    AssetService.prototype.assetallocationsendWithHttpInfo = function (request, extraHttpRequestParams) {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling assetallocationsend.');
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetallocationsend", requestOptions);
    };
    /**
     *
     * Show status as it pertains to any current Z-DAG conflicts or warnings related to a sender or sender/txid combination of an asset allocation transfer. Leave txid empty if you are not checking for a specific transfer. Return value is in the status field and can represent 4 levels(-1:Not Found, 0:OK, 1:Warning or 2:Critical)
     * @param asset
     * @param sender
     * @param txid
     
     */
    AssetService.prototype.assetallocationsenderstatusWithHttpInfo = function (asset, sender, txid, extraHttpRequestParams) {
        if (asset === null || asset === undefined) {
            throw new Error('Required parameter asset was null or undefined when calling assetallocationsenderstatus.');
        }
        if (sender === null || sender === undefined) {
            throw new Error('Required parameter sender was null or undefined when calling assetallocationsenderstatus.');
        }
        if (txid === null || txid === undefined) {
            throw new Error('Required parameter txid was null or undefined when calling assetallocationsenderstatus.');
        }
        var queryParameters = new http_1.URLSearchParams('', new encoder_1.CustomQueryEncoderHelper());
        if (asset !== undefined) {
            queryParameters.set('asset', asset);
        }
        if (sender !== undefined) {
            queryParameters.set('sender', sender);
        }
        if (txid !== undefined) {
            queryParameters.set('txid', txid);
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetallocationsenderstatus", requestOptions);
    };
    /**
     *
     * Show stored values of a single asset and its. Set getinputs to true if you want to get the allocation inputs, if applicable.
     * @param asset
     * @param getinputs
     
     */
    AssetService.prototype.assetinfoWithHttpInfo = function (asset, getinputs, extraHttpRequestParams) {
        if (asset === null || asset === undefined) {
            throw new Error('Required parameter asset was null or undefined when calling assetinfo.');
        }
        if (getinputs === null || getinputs === undefined) {
            throw new Error('Required parameter getinputs was null or undefined when calling assetinfo.');
        }
        var queryParameters = new http_1.URLSearchParams('', new encoder_1.CustomQueryEncoderHelper());
        if (asset !== undefined) {
            queryParameters.set('asset', asset);
        }
        if (getinputs !== undefined) {
            queryParameters.set('getinputs', getinputs);
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetinfo", requestOptions);
    };
    /**
     *
     * Create a new Syscoin Asset.
     * @param request
     
     */
    AssetService.prototype.assetnewWithHttpInfo = function (request, extraHttpRequestParams) {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling assetnew.');
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetnew", requestOptions);
    };
    /**
     *
     * Send an asset allocation you own to another alias.
     * @param request
     
     */
    AssetService.prototype.assetsendWithHttpInfo = function (request, extraHttpRequestParams) {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling assetsend.');
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetsend", requestOptions);
    };
    /**
     *
     * Transfer asset from one user to another.
     * @param request
     
     */
    AssetService.prototype.assettransferWithHttpInfo = function (request, extraHttpRequestParams) {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling assettransfer.');
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assettransfer", requestOptions);
    };
    /**
     *
     * Perform an update on an asset you control.
     * @param request
     
     */
    AssetService.prototype.assetupdateWithHttpInfo = function (request, extraHttpRequestParams) {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling assetupdate.');
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/assetupdate", requestOptions);
    };
    AssetService = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [http_1.Http, String, configuration_1.Configuration])
    ], AssetService);
    return AssetService;
}());
exports.AssetService = AssetService;
//# sourceMappingURL=asset.service.js.map