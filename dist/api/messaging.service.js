"use strict";
/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-variable member-ordering */
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("../rxjs-operators");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var MessagingService = /** @class */ (function () {
    function MessagingService(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost:8001';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    MessagingService.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    MessagingService.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    /**
     * Show stored values of a single message.
     * @param guid
     */
    MessagingService.prototype.messageinfo = function (guid, extraHttpRequestParams) {
        return this.messageinfoWithHttpInfo(guid, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Create a new Syscoin encrypted message.
     * @param request
     */
    MessagingService.prototype.messagenew = function (request, extraHttpRequestParams) {
        return this.messagenewWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Count received messages that an array of aliases own.
     * @param aliases
     */
    MessagingService.prototype.messagereceivecount = function (aliases, extraHttpRequestParams) {
        return this.messagereceivecountWithHttpInfo(aliases, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * List received messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    MessagingService.prototype.messagereceivelist = function (aliases, message, count, from, extraHttpRequestParams) {
        return this.messagereceivelistWithHttpInfo(aliases, message, count, from, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Count sent messages that an array of aliases own.
     * @param aliases
     */
    MessagingService.prototype.messagesentcount = function (aliases, extraHttpRequestParams) {
        return this.messagesentcountWithHttpInfo(aliases, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * List sent messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    MessagingService.prototype.messagesentlist = function (aliases, message, count, from, extraHttpRequestParams) {
        return this.messagesentlistWithHttpInfo(aliases, message, count, from, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * Show stored values of a single message.
     * @param guid
     */
    MessagingService.prototype.messageinfoWithHttpInfo = function (guid, extraHttpRequestParams) {
        var path = this.basePath + '/messageinfo';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'guid' is not null or undefined
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling messageinfo.');
        }
        if (guid !== undefined) {
            queryParameters.set('guid', guid);
        }
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * Create a new Syscoin encrypted message.
     * @param request
     */
    MessagingService.prototype.messagenewWithHttpInfo = function (request, extraHttpRequestParams) {
        var path = this.basePath + '/messagenew';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling messagenew.');
        }
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * Count received messages that an array of aliases own.
     * @param aliases
     */
    MessagingService.prototype.messagereceivecountWithHttpInfo = function (aliases, extraHttpRequestParams) {
        var path = this.basePath + '/messagereceivecount';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (aliases) {
            queryParameters.set('aliases', aliases.join(variables_1.COLLECTION_FORMATS['csv']));
        }
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * List received messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    MessagingService.prototype.messagereceivelistWithHttpInfo = function (aliases, message, count, from, extraHttpRequestParams) {
        var path = this.basePath + '/messagereceivelist';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (aliases) {
            queryParameters.set('aliases', aliases.join(variables_1.COLLECTION_FORMATS['csv']));
        }
        if (message !== undefined) {
            queryParameters.set('message', message);
        }
        if (count !== undefined) {
            queryParameters.set('count', count);
        }
        if (from !== undefined) {
            queryParameters.set('from', from);
        }
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * Count sent messages that an array of aliases own.
     * @param aliases
     */
    MessagingService.prototype.messagesentcountWithHttpInfo = function (aliases, extraHttpRequestParams) {
        var path = this.basePath + '/messagesentcount';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (aliases) {
            queryParameters.set('aliases', aliases.join(variables_1.COLLECTION_FORMATS['csv']));
        }
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     * List sent messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    MessagingService.prototype.messagesentlistWithHttpInfo = function (aliases, message, count, from, extraHttpRequestParams) {
        var path = this.basePath + '/messagesentlist';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (aliases) {
            queryParameters.set('aliases', aliases.join(variables_1.COLLECTION_FORMATS['csv']));
        }
        if (message !== undefined) {
            queryParameters.set('message', message);
        }
        if (count !== undefined) {
            queryParameters.set('count', count);
        }
        if (from !== undefined) {
            queryParameters.set('from', from);
        }
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    MessagingService = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [http_1.Http, String, configuration_1.Configuration])
    ], MessagingService);
    return MessagingService;
}());
exports.MessagingService = MessagingService;
//# sourceMappingURL=messaging.service.js.map