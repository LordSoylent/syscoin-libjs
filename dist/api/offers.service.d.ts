/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import '../rxjs-operators';
import { Offer } from '../model/offer';
import { OfferAccept } from '../model/offerAccept';
import { OfferAcceptRequest } from '../model/offerAcceptRequest';
import { OfferAddWhitelistRequest } from '../model/offerAddWhitelistRequest';
import { OfferClearWhitelistRequest } from '../model/offerClearWhitelistRequest';
import { OfferHistoryEntry } from '../model/offerHistoryEntry';
import { OfferLinkRequest } from '../model/offerLinkRequest';
import { OfferNewRequest } from '../model/offerNewRequest';
import { OfferRemoveWhitelistRequest } from '../model/offerRemoveWhitelistRequest';
import { OfferUpdateRequest } from '../model/offerUpdateRequest';
import { OfferWhitelistEntry } from '../model/offerWhitelistEntry';
import { Configuration } from '../configuration';
export declare class OffersService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Accept&Pay for a confirmed offer.
     * @param request
     */
    offeraccept(request: OfferAcceptRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Acknowledge offer payment as seller of offer. Deducts qty of offer and increases number of sold inventory.
     * @param offerguid
     * @param offeracceptguid
     */
    offeracceptacknowledge(offerguid: string, offeracceptguid: string, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * List count of offer accept for a set of aliases. filterpurchases filters results for count of accepts that have been bought with aliases passed in(as buyer), filtersales filters results for count of accepts purchased by aliases passed in(as merchant or affiliate).
     * @param aliases
     * @param filterpurchases
     * @param filtersales
     */
    offeracceptcount(aliases?: Array<string>, filterpurchases?: boolean, filtersales?: boolean, extraHttpRequestParams?: any): Observable<number>;
    /**
     * Send feedback and rating for offer accept specified. Ratings are numbers from 1 to 5
     * @param offerguid
     * @param offeracceptguid
     * @param feedback
     * @param rating
     */
    offeracceptfeedback(offerguid: string, offeracceptguid: string, feedback?: string, rating?: number, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * List offer accepts for a set of aliases. filterpurchases filters results for accepts that have been bought with aliases passed in(as buyer), filtersales filters results for accepts purchased by aliases passed in(as merchant or affiliate).
     * @param aliases
     * @param guid
     * @param filterpurchases
     * @param filtersales
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    offeracceptlist(aliases?: Array<string>, guid?: string, filterpurchases?: boolean, filtersales?: boolean, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Array<OfferAccept>>;
    /**
     * Add to the affiliate list of your offer(controls who can resell). Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offeraddwhitelist(request: OfferAddWhitelistRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Clear the affiliate list of your offer(controls who can resell). Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerclearwhitelist(request: OfferClearWhitelistRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Count offers that an array of aliases own.
     * @param aliases
     */
    offercount(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<number>;
    /**
     * scan and filter offers
     * @param regexp apply [regexp] on offeres, empty means all offers
     * @param from show results from number [from]
     * @param count the number of results to return
     * @param safesearch shows all offers that are safe to display (not on the ban list)
     * @param category Category you want to search in, empty for all
     */
    offerfilter(regexp?: string, from?: string, count?: number, safesearch?: string, category?: string, extraHttpRequestParams?: any): Observable<Array<Offer>>;
    /**
     * List all stored values of an offer.
     * @param offer Offer GUID.
     */
    offerhistory(offer: string, extraHttpRequestParams?: any): Observable<Array<OfferHistoryEntry>>;
    /**
     * Show values of an offer.
     * @param guid
     */
    offerinfo(guid: string, extraHttpRequestParams?: any): Observable<Offer>;
    /**
     * Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerlink(request: OfferLinkRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * list offers that an array of aliases own.
     * @param aliases
     * @param guid
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    offerlist(aliases?: Array<string>, guid?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Array<Offer>>;
    /**
     * Create a new offer on the Syscoin decentralized marketplace. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offernew(request: OfferNewRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Remove from the affiliate list of your offer(controls who can resell). Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerremovewhitelist(request: OfferRemoveWhitelistRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Perform an update on an offer you control. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerupdate(request: OfferUpdateRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * List all affiliates for this offer.
     * @param offerguid
     */
    offerwhitelist(offerguid: string, extraHttpRequestParams?: any): Observable<Array<OfferWhitelistEntry>>;
    /**
     *
     * Accept&amp;Pay for a confirmed offer.
     * @param request
     */
    offeracceptWithHttpInfo(request: OfferAcceptRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Acknowledge offer payment as seller of offer. Deducts qty of offer and increases number of sold inventory.
     * @param offerguid
     * @param offeracceptguid
     */
    offeracceptacknowledgeWithHttpInfo(offerguid: string, offeracceptguid: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List count of offer accept for a set of aliases. filterpurchases filters results for count of accepts that have been bought with aliases passed in(as buyer), filtersales filters results for count of accepts purchased by aliases passed in(as merchant or affiliate).
     * @param aliases
     * @param filterpurchases
     * @param filtersales
     */
    offeracceptcountWithHttpInfo(aliases?: Array<string>, filterpurchases?: boolean, filtersales?: boolean, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Send feedback and rating for offer accept specified. Ratings are numbers from 1 to 5
     * @param offerguid
     * @param offeracceptguid
     * @param feedback
     * @param rating
     */
    offeracceptfeedbackWithHttpInfo(offerguid: string, offeracceptguid: string, feedback?: string, rating?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List offer accepts for a set of aliases. filterpurchases filters results for accepts that have been bought with aliases passed in(as buyer), filtersales filters results for accepts purchased by aliases passed in(as merchant or affiliate).
     * @param aliases
     * @param guid
     * @param filterpurchases
     * @param filtersales
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    offeracceptlistWithHttpInfo(aliases?: Array<string>, guid?: string, filterpurchases?: boolean, filtersales?: boolean, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Add to the affiliate list of your offer(controls who can resell). Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offeraddwhitelistWithHttpInfo(request: OfferAddWhitelistRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Clear the affiliate list of your offer(controls who can resell). Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerclearwhitelistWithHttpInfo(request: OfferClearWhitelistRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Count offers that an array of aliases own.
     * @param aliases
     */
    offercountWithHttpInfo(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * scan and filter offers
     * @param regexp apply [regexp] on offeres, empty means all offers
     * @param from show results from number [from]
     * @param count the number of results to return
     * @param safesearch shows all offers that are safe to display (not on the ban list)
     * @param category Category you want to search in, empty for all
     */
    offerfilterWithHttpInfo(regexp?: string, from?: string, count?: number, safesearch?: string, category?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List all stored values of an offer.
     * @param offer Offer GUID.
     */
    offerhistoryWithHttpInfo(offer: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Show values of an offer.
     * @param guid
     */
    offerinfoWithHttpInfo(guid: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerlinkWithHttpInfo(request: OfferLinkRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * list offers that an array of aliases own.
     * @param aliases
     * @param guid
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    offerlistWithHttpInfo(aliases?: Array<string>, guid?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Create a new offer on the Syscoin decentralized marketplace. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offernewWithHttpInfo(request: OfferNewRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Remove from the affiliate list of your offer(controls who can resell). Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerremovewhitelistWithHttpInfo(request: OfferRemoveWhitelistRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Perform an update on an offer you control. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    offerupdateWithHttpInfo(request: OfferUpdateRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List all affiliates for this offer.
     * @param offerguid
     */
    offerwhitelistWithHttpInfo(offerguid: string, extraHttpRequestParams?: any): Observable<Response>;
}
