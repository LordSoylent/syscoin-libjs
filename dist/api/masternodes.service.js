"use strict";
/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
var encoder_1 = require("../encoder");
require("../rxjs-operators");
var variables_1 = require("../variables");
var configuration_1 = require("../configuration");
var MasternodesService = /** @class */ (function () {
    function MasternodesService(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'http://localhost:8001';
        this.defaultHeaders = new http_1.Headers();
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    MasternodesService.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    /**
     * Imports keys from an Electrum wallet export file (.csv or .json).
     * @param filename (string, required) The Electrum wallet export file, should be in csv or json format
     * @param index (numeric, optional, default&#x3D;0) Rescan the wallet for transactions starting from this block index
     */
    MasternodesService.prototype.importelectrumwallet = function (filename, index, extraHttpRequestParams) {
        return this.importelectrumwalletWithHttpInfo(filename, index, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Anonymous mixing and sending coins.
     * @param command &#39;start&#39; - Start Mixing &#39;stop&#39; - Stop mixing &#39;reset&#39; - Reset mixing
     */
    MasternodesService.prototype.privatesend = function (command, extraHttpRequestParams) {
        return this.privatesendWithHttpInfo(command, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Keep-alive message for masternode via TCP ping requests.
     * @param version Sentinel version in the form &#39;x.x.x&#39;
     */
    MasternodesService.prototype.sentinelping = function (version, extraHttpRequestParams) {
        return this.sentinelpingWithHttpInfo(version, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Compile and relay a governance vote with provided external signature instead of signing vote internally.
     * @param request
     */
    MasternodesService.prototype.voteraw = function (request, extraHttpRequestParams) {
        return this.voterawWithHttpInfo(request, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * Imports keys from an Electrum wallet export file (.csv or .json).
     * @param filename (string, required) The Electrum wallet export file, should be in csv or json format
     * @param index (numeric, optional, default&#x3D;0) Rescan the wallet for transactions starting from this block index
     
     */
    MasternodesService.prototype.importelectrumwalletWithHttpInfo = function (filename, index, extraHttpRequestParams) {
        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling importelectrumwallet.');
        }
        var queryParameters = new http_1.URLSearchParams('', new encoder_1.CustomQueryEncoderHelper());
        if (filename !== undefined) {
            queryParameters.set('filename', filename);
        }
        if (index !== undefined) {
            queryParameters.set('index', index);
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/importelectrumwallet", requestOptions);
    };
    /**
     *
     * Anonymous mixing and sending coins.
     * @param command &#39;start&#39; - Start Mixing &#39;stop&#39; - Stop mixing &#39;reset&#39; - Reset mixing
     
     */
    MasternodesService.prototype.privatesendWithHttpInfo = function (command, extraHttpRequestParams) {
        if (command === null || command === undefined) {
            throw new Error('Required parameter command was null or undefined when calling privatesend.');
        }
        var queryParameters = new http_1.URLSearchParams('', new encoder_1.CustomQueryEncoderHelper());
        if (command !== undefined) {
            queryParameters.set('command', command);
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/privatesend", requestOptions);
    };
    /**
     *
     * Keep-alive message for masternode via TCP ping requests.
     * @param version Sentinel version in the form &#39;x.x.x&#39;
     
     */
    MasternodesService.prototype.sentinelpingWithHttpInfo = function (version, extraHttpRequestParams) {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling sentinelping.');
        }
        var queryParameters = new http_1.URLSearchParams('', new encoder_1.CustomQueryEncoderHelper());
        if (version !== undefined) {
            queryParameters.set('version', version);
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/sentinelping", requestOptions);
    };
    /**
     *
     * Compile and relay a governance vote with provided external signature instead of signing vote internally.
     * @param request
     
     */
    MasternodesService.prototype.voterawWithHttpInfo = function (request, extraHttpRequestParams) {
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling voteraw.');
        }
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // authentication (token) required
        if (this.configuration.apiKeys["token"]) {
            headers.set('token', this.configuration.apiKeys["token"]);
        }
        // to determine the Accept header
        var httpHeaderAccepts = [
            'application/json'
        ];
        var httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers.set("Accept", httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers.set('Content-Type', httpContentTypeSelected);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request),
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(this.basePath + "/voteraw", requestOptions);
    };
    MasternodesService = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), __param(1, core_1.Inject(variables_1.BASE_PATH)), __param(2, core_1.Optional()),
        __metadata("design:paramtypes", [http_1.Http, String, configuration_1.Configuration])
    ], MasternodesService);
    return MasternodesService;
}());
exports.MasternodesService = MasternodesService;
//# sourceMappingURL=masternodes.service.js.map