/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import '../rxjs-operators';
import { Message } from '../model/message';
import { MessageNewRequest } from '../model/messageNewRequest';
import { Configuration } from '../configuration';
export declare class MessagingService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Show stored values of a single message.
     * @param guid
     */
    messageinfo(guid: string, extraHttpRequestParams?: any): Observable<Message>;
    /**
     * Create a new Syscoin encrypted message.
     * @param request
     */
    messagenew(request: MessageNewRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Count received messages that an array of aliases own.
     * @param aliases
     */
    messagereceivecount(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<number>;
    /**
     * List received messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    messagereceivelist(aliases?: Array<string>, message?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Array<Message>>;
    /**
     * Count sent messages that an array of aliases own.
     * @param aliases
     */
    messagesentcount(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<number>;
    /**
     * List sent messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    messagesentlist(aliases?: Array<string>, message?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Array<Message>>;
    /**
     *
     * Show stored values of a single message.
     * @param guid
     */
    messageinfoWithHttpInfo(guid: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Create a new Syscoin encrypted message.
     * @param request
     */
    messagenewWithHttpInfo(request: MessageNewRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Count received messages that an array of aliases own.
     * @param aliases
     */
    messagereceivecountWithHttpInfo(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List received messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    messagereceivelistWithHttpInfo(aliases?: Array<string>, message?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Count sent messages that an array of aliases own.
     * @param aliases
     */
    messagesentcountWithHttpInfo(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List sent messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases
     * @param message
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    messagesentlistWithHttpInfo(aliases?: Array<string>, message?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Response>;
}
