/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import '../rxjs-operators';
import { Cert } from '../model/cert';
import { CertHistoryEntry } from '../model/certHistoryEntry';
import { CertNewRequest } from '../model/certNewRequest';
import { CertTransferRequest } from '../model/certTransferRequest';
import { CertUpdateRequest } from '../model/certUpdateRequest';
import { Configuration } from '../configuration';
export declare class CertificatesService {
    protected http: Http;
    protected basePath: string;
    defaultHeaders: Headers;
    configuration: Configuration;
    constructor(http: Http, basePath: string, configuration: Configuration);
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj;
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Count certificates that an array of aliases own.
     * @param aliases
     */
    certcount(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<number>;
    /**
     * scan and filter certs certfilter \"\" 5 = list certs updated in last 5 blocks certfilter \"^cert\" = list all certs starting with \"cert\" certfilter 36000 0 0 stat = display stats (number of certs) on active certs
     * @param regexp apply [regexp] on certes, empty means all certs
     * @param from show results from number [from]
     * @param count the number of results to return
     * @param safesearch shows all certs that are safe to display (not on the ban list)
     * @param category category you want to search in, empty for all
     */
    certfilter(regexp?: string, from?: string, count?: number, safesearch?: string, category?: string, extraHttpRequestParams?: any): Observable<Array<Cert>>;
    /**
     * List all stored values of an cert.
     * @param certname
     */
    certhistory(certname: string, extraHttpRequestParams?: any): Observable<Array<CertHistoryEntry>>;
    /**
     * Show stored values of a single certificate.
     * @param guid
     */
    certinfo(guid: string, extraHttpRequestParams?: any): Observable<Cert>;
    /**
     * List certificates that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in certificates.
     * @param aliases
     * @param cert
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    certlist(aliases?: Array<string>, cert?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Array<Cert>>;
    /**
     * Create a new Syscoin Certificate. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    certnew(request: CertNewRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Transfer certificate from one user to another. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    certtransfer(request: CertTransferRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     * Perform an update on an certificate you control. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    certupdate(request: CertUpdateRequest, extraHttpRequestParams?: any): Observable<Array<string>>;
    /**
     *
     * Count certificates that an array of aliases own.
     * @param aliases
     */
    certcountWithHttpInfo(aliases?: Array<string>, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * scan and filter certs certfilter \&quot;\&quot; 5 &#x3D; list certs updated in last 5 blocks certfilter \&quot;^cert\&quot; &#x3D; list all certs starting with \&quot;cert\&quot; certfilter 36000 0 0 stat &#x3D; display stats (number of certs) on active certs
     * @param regexp apply [regexp] on certes, empty means all certs
     * @param from show results from number [from]
     * @param count the number of results to return
     * @param safesearch shows all certs that are safe to display (not on the ban list)
     * @param category category you want to search in, empty for all
     */
    certfilterWithHttpInfo(regexp?: string, from?: string, count?: number, safesearch?: string, category?: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List all stored values of an cert.
     * @param certname
     */
    certhistoryWithHttpInfo(certname: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Show stored values of a single certificate.
     * @param guid
     */
    certinfoWithHttpInfo(guid: string, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * List certificates that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in certificates.
     * @param aliases
     * @param cert
     * @param count The number of results to return
     * @param from The number of results to skip
     */
    certlistWithHttpInfo(aliases?: Array<string>, cert?: string, count?: number, from?: number, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Create a new Syscoin Certificate. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    certnewWithHttpInfo(request: CertNewRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Transfer certificate from one user to another. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    certtransferWithHttpInfo(request: CertTransferRequest, extraHttpRequestParams?: any): Observable<Response>;
    /**
     *
     * Perform an update on an certificate you control. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request
     */
    certupdateWithHttpInfo(request: CertUpdateRequest, extraHttpRequestParams?: any): Observable<Response>;
}
